apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: 'com.google.gms.google-services'

def enableProguardInReleaseBuilds = true
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

import org.apache.tools.ant.taskdefs.condition.Os

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdk = rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        buildConfig true
    }

    namespace "com.thaiduong.cybershield"

    defaultConfig {
        applicationId "com.thaiduong.cybershield"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            storeFile file('my-release-key.keystore')
            storePassword 'Duong@2010'
            keyAlias 'my-key-alias'
            keyPassword 'Duong@2010'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'
            ), 'proguard-rules.pro'
        }
    }
}

// ----------------- TASK AUTO BUNDLE JS -----------------
task bundleReleaseJs(type: Exec) {
    // tạo folder assets + res nếu chưa có
    doFirst {
        def assetsDir = file('app/src/main/assets')
        def resDir = file('app/src/main/res')
        if (!assetsDir.exists()) assetsDir.mkdirs()
        if (!resDir.exists()) resDir.mkdirs()
    }

    def command = Os.isFamily(Os.FAMILY_WINDOWS) ? 'cmd' : 'sh'
    def argsList = Os.isFamily(Os.FAMILY_WINDOWS) ?
            ['/c', 'npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output app/src/main/assets/index.android.bundle --assets-dest app/src/main/res/'] :
            ['-c', 'npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output app/src/main/assets/index.android.bundle --assets-dest app/src/main/res/']

    commandLine ([command] + argsList)
}

// Auto chạy trước build release
preBuild.dependsOn(bundleReleaseJs)

// ----------------- DEPENDENCIES -----------------
dependencies {
    // For making HTTP requests in native module
    implementation("com.squareup.okhttp3:okhttp:4.9.3")
    // For parsing JSON in native module
    implementation("com.google.code.gson:gson:2.8.9")

    implementation("com.facebook.react:react-android:0.75.4")
    implementation project(":notifee_react-native")
    implementation project(":react-native-clipboard_clipboard")
    implementation project(":react-native-gesture-handler")
    implementation project(':react-native-keychain')
    implementation project(':react-native-permissions')
    implementation project(':react-native-push-notification')
    implementation project(':react-native-safe-area-context')
    implementation project(':react-native-screens')
    implementation project(':react-native-vector-icons')
    implementation project(':nodejs-mobile-react-native')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
