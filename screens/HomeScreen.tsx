import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Switch, Button, Alert, NativeModules, DeviceEventEmitter, ScrollView } from 'react-native';
import InputBox from '../components/InputBox';
import ResultCard from '../components/ResultCard';
import LoadingOverlay from '../components/LoadingOverlay';

const { ControlModule } = NativeModules;
const API_URL = 'https://cybershield-backend-renderserver.onrender.com/api/analyze';
const ANALYSIS_TIMEOUT = 20000; // 20 gi√¢y

const URL_REGEX = /(https?:\/\/[^\s]+)/g;

const openAppSettings = async (settingType: 'notification' | 'usage') => {
    try {
        await ControlModule.openSpecificAppSettings(settingType);
    } catch (e: any) {
        if (e.code === 'E_USAGE_ACCESS_NOT_FOUND') {
            Alert.alert(
                'H∆∞·ªõng D·∫´n C·∫•p Quy·ªÅn Th·ªß C√¥ng',
                `Kh√¥ng th·ªÉ m·ªü tr·ª±c ti·∫øp. Vui l√≤ng c·∫•p quy·ªÅn th·ªß c√¥ng theo c√°c ƒë∆∞·ªùng d·∫´n ph·ªï bi·∫øn d∆∞·ªõi ƒë√¢y:

                üì± OPPO / Realme:
                C√†i ƒë·∫∑t > Qu·∫£n l√Ω ·ª©ng d·ª•ng > Truy c·∫≠p ·ª©ng d·ª•ng ƒë·∫∑c bi·ªát > Truy c·∫≠p d·ªØ li·ªáu s·ª≠ d·ª•ng

                üì± Samsung:
                C√†i ƒë·∫∑t > ·ª®ng d·ª•ng > (d·∫•u 3 ch·∫•m ‚ãÆ) > Truy c·∫≠p ƒë·∫∑c bi·ªát > Quy·ªÅn truy c·∫≠p s·ª≠ d·ª•ng

                üì± Xiaomi:
                C√†i ƒë·∫∑t > B·∫£o v·ªá quy·ªÅn ri√™ng t∆∞ > Quy·ªÅn ƒë·∫∑c bi·ªát > Truy c·∫≠p d·ªØ li·ªáu s·ª≠ d·ª•ng

                üì± Android G·ªëc (Pixel, ...):
                C√†i ƒë·∫∑t > ·ª®ng d·ª•ng > Quy·ªÅn truy c·∫≠p ƒë·∫∑c bi·ªát c·ªßa ·ª©ng d·ª•ng > Truy c·∫≠p d·ªØ li·ªáu s·ª≠ d·ª•ng

                (T√™n c√°c m·ª•c c√≥ th·ªÉ thay ƒë·ªïi m·ªôt ch√∫t t√πy phi√™n b·∫£n)`,
                [{ text: 'ƒê√£ hi·ªÉu' }]
            );
        } else {
            Alert.alert('L·ªói', `Kh√¥ng th·ªÉ m·ªü m√†n h√¨nh C√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ c·∫•p quy·ªÅn th·ªß c√¥ng trong C√†i ƒë·∫∑t c·ªßa m√°y.\nL·ªói: ${e.message}`);
        }
    }
};

export default function HomeScreen() {
    const [inputText, setInputText] = useState('');
    const [analysisResult, setAnalysisResult] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [loadingMessage, setLoadingMessage] = useState('ƒêang ph√¢n t√≠ch...');
    const [error, setError] = useState<string | null>(null);
    const [isProtectionEnabled, setIsProtectionEnabled] = useState(false);

    useEffect(() => {
        const processTextSubscription = DeviceEventEmitter.addListener('onProcessText', async (event) => {
            const text = event.text;
            if (text) {
                setInputText(text);
                // Automatically trigger analysis for text received from the context menu
                handleAnalysis(text, true);
            }
        });

        return () => {
            processTextSubscription.remove();
        };
    }, []);

    const handleAnalysis = async (text: string, isAuto: boolean = false) => {
        if (!text.trim()) {
            if (!isAuto) Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn ph√¢n t√≠ch.");
            return;
        }
        
        setLoadingMessage(isAuto ? 'T·ª± ƒë·ªông qu√©t vƒÉn b·∫£n...' : 'ƒêang ph√¢n t√≠ch...');
        setIsLoading(true);
        setError(null);
        setAnalysisResult(null);

        const urls = text.match(URL_REGEX) || [];

        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), ANALYSIS_TIMEOUT);

        try {
            const urls = text.match(URL_REGEX) || [];

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), ANALYSIS_TIMEOUT);

            const response = await fetch('https://cybershield-backend-renderserver.onrender.com/api/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ text: text, urls: urls }),
                signal: controller.signal,
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errData = await response.json();
                throw new Error(errData.error || `L·ªói m√°y ch·ªß: ${response.status}`);
            }

            const result = await response.json();
            setAnalysisResult(result.result);

            // For text from context menu, also show a notification
            if (isAuto) {
                ControlModule.showAnalysisNotification(result.result);
            }

        } catch (e: any) {
            clearTimeout(timeoutId);
            let errorMessage = 'ƒê√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi t·ªõi m√°y ch·ªß.';
            if (e.name === 'AbortError') {
                errorMessage = 'Y√™u c·∫ßu ph√¢n t√≠ch ƒë√£ h·∫øt th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.';
            }
            setError(errorMessage);
            if (!isAuto) {
                Alert.alert("L·ªói Ph√¢n T√≠ch", errorMessage);
            }
        } finally {
            setIsLoading(false);
        }
    };

    const toggleProtection = async (value: boolean) => {
        if (value) {
            try {
                const permissions = await ControlModule.checkPermissions();
                if (!permissions.notificationAccess || !permissions.usageAccess) {
                    let missingPermissions = [];
                    if (!permissions.notificationAccess) missingPermissions.push("Truy c·∫≠p Th√¥ng b√°o");
                    if (!permissions.usageAccess) missingPermissions.push("Truy c·∫≠p D·ªØ li·ªáu S·ª≠ d·ª•ng");
                    
                    Alert.alert(
                        'Thi·∫øu quy·ªÅn quan tr·ªçng',
                        `ƒê·ªÉ b·∫≠t b·∫£o v·ªá, b·∫°n c·∫ßn c·∫•p quy·ªÅn: ${missingPermissions.join(' v√† ')}.\n\nVui l√≤ng v√†o m·ª•c c·∫•p quy·ªÅn b√™n d∆∞·ªõi ƒë·ªÉ b·∫≠t.`,
                        [{ text: 'ƒê√£ hi·ªÉu' }]
                    );
                    return;
                }

                Alert.alert(
                    'X√°c nh·∫≠n B·∫≠t B·∫£o v·ªá',
                    'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫≠t t√≠nh nƒÉng qu√©t th√¥ng b√°o t·ª± ƒë·ªông kh√¥ng?',
                    [
                        { text: 'H·ªßy', style: 'cancel' },
                        { 
                            text: 'OK, B·∫≠t', 
                            onPress: () => {
                                ControlModule.startControlService();
                                setIsProtectionEnabled(true);
                            } 
                        }
                    ]
                );

            } catch (err) {
                Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ki·ªÉm tra quy·ªÅn c·ªßa ·ª©ng d·ª•ng.");
            }
        } else {
            ControlModule.stopControlService();
            setIsProtectionEnabled(false);
        }
    };

    return (
        <ScrollView style={styles.container}>
            <LoadingOverlay visible={isLoading} message={loadingMessage} />
            <Text style={styles.title}>CyberShield</Text>
            <Text style={styles.description}>
                Nh·∫≠p ho·∫∑c d√°n tin nh·∫Øn, ƒë∆∞·ªùng link ƒë√°ng ng·ªù v√†o √¥ d∆∞·ªõi ƒë√¢y ƒë·ªÉ ki·ªÉm tra.
            </Text>
            <InputBox value={inputText} onChange={setInputText} />
            <View style={styles.buttonContainer}>
                 <Button title="KI·ªÇM TRA" onPress={() => handleAnalysis(inputText)} disabled={isLoading} />
            </View>
            
            {error && <Text style={styles.errorText}>{error}</Text>}
            <ResultCard result={analysisResult} />

            <View style={styles.card}>
                <Text style={styles.cardTitle}>B·∫£o V·ªá T·ª± ƒê·ªông</Text>
                <Text style={styles.cardDescription}>
                    T·ª± ƒë·ªông qu√©t tin nh·∫Øn t·ª´ Zalo, Messenger... v√† c·∫£nh b√°o n·∫øu c√≥ nguy hi·ªÉm.
                </Text>
                <View style={styles.switchContainer}>
                    <Text style={[styles.status, { color: isProtectionEnabled ? '#4CAF50' : '#F44336' }]}>
                        {isProtectionEnabled ? 'ƒêANG B·∫¨T' : 'ƒêANG T·∫ÆT'}
                    </Text>
                    <Switch
                        trackColor={{ false: '#767577', true: '#81b0ff' }}
                        thumbColor={isProtectionEnabled ? '#1976D2' : '#f4f3f4'}
                        onValueChange={toggleProtection}
                        value={isProtectionEnabled}
                    />
                </View>
                 <Text style={styles.permissionDescription}>
                    N·∫øu t√≠nh nƒÉng kh√¥ng ho·∫°t ƒë·ªông, h√£y c·∫•p ƒë·ªß quy·ªÅn cho ·ª©ng d·ª•ng:
                </Text>
                <View style={styles.permissionButtonContainer}>
                    <Button title="Quy·ªÅn Th√¥ng B√°o" onPress={() => openAppSettings('notification')} />
                    <Button title="Quy·ªÅn S·ª≠ D·ª•ng" onPress={() => openAppSettings('usage')} />
                </View>
            </View>
        </ScrollView>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 16,
        backgroundColor: '#f0f2f5',
    },
    title: {
        fontSize: 28,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 8,
        color: '#1c1e21',
    },
    description: {
        fontSize: 16,
        color: '#606770',
        textAlign: 'center',
        lineHeight: 22,
        marginBottom: 20,
    },
    buttonContainer: {
        marginVertical: 10,
    },
    errorText: {
        color: 'red',
        textAlign: 'center',
        marginVertical: 10,
    },
    card: {
        backgroundColor: '#fff',
        borderRadius: 12,
        padding: 20,
        marginTop: 20,
        elevation: 3,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
    },
    cardTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        marginBottom: 8,
        color: '#1c1e21',
    },
    cardDescription: {
        fontSize: 15,
        color: '#606770',
        lineHeight: 22,
        marginBottom: 16,
    },
    permissionDescription: {
        fontSize: 14,
        color: '#606770',
        lineHeight: 20,
        marginTop: 16,
        textAlign: 'center',
    },
    switchContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingTop: 10,
        borderTopWidth: 1,
        borderTopColor: '#e4e6eb',
    },
    status: {
        fontSize: 16,
        fontWeight: 'bold',
    },
    permissionButtonContainer: {
        flexDirection: 'row',
        justifyContent: 'space-around',
        marginTop: 10,
    },
});